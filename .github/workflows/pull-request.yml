name: On Pull Request

on:
  push:
    branches:
      - main
  pull_request: {}

jobs:
  docker-build:
    uses: ./.github/workflows/docker.yml
    with:
      push: false
      cache_key: docker-${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker-

      - name: Load the `build` image from cache
        run: |
          mkdir -p /tmp/.buildx-cache
          docker load < /tmp/.buildx-cache/image.tar

      - name: Run tests using the `build` image
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:build npm run test:unit run

  type-check:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ github.sha }}
          restore-keys: |
            docker-

      - name: Load the `build` image from cache
        run: |
          mkdir -p /tmp/.buildx-cache
          docker load < /tmp/.buildx-cache/image.tar

      - name: Run formatting check using the `build` image
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:build npm run format:check

      - name: Run ESLint and count errors
        id: count-errors
        run: |
          OUTPUT=$(docker run --rm \
            -w /app \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:build \
            sh -c  "npx eslint 'src/**/*.{js,ts,vue}' -f json") || true

          ERRORS=$(echo "$OUTPUT" | jq '[.[] | .messages[] | select(.severity == 2)] | length')
          WARNINGS=$(echo "$OUTPUT" | jq '[.[] | .messages[] | select(.severity == 1)] | length')

          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT

      - name: Comment on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          message: |
            ESLint results:
            Errors: ${{ steps.count-errors.outputs.errors }}
            Warnings: ${{ steps.count-errors.outputs.warnings }}

      - name: Run tests using the `build` image
        run: |
          docker run --rm ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:build npm run type-check
